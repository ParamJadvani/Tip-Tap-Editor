"use client";

import React, { useEffect, useState } from 'react';
import { useEditor, EditorContent, Editor } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Bold from '@tiptap/extension-bold';
import Italic from '@tiptap/extension-italic';
import Underline from '@tiptap/extension-underline';
import Code from '@tiptap/extension-code';
import Highlight from '@tiptap/extension-highlight';
import Link from '@tiptap/extension-link';
import Strike from '@tiptap/extension-strike';
import Subscript from '@tiptap/extension-subscript';
import Superscript from '@tiptap/extension-superscript';
import TextStyle from '@tiptap/extension-text-style';
import Heading, { Level } from '@tiptap/extension-heading';
import Image from '@tiptap/extension-image';
import TextAlign from '@tiptap/extension-text-align';
import TaskList from '@tiptap/extension-task-list';
import TaskItem from '@tiptap/extension-task-item';
import Paragraph from '@tiptap/extension-paragraph';
import { Separator } from "@/components/ui/separator";
import { cn } from "@/lib/utils";
import {
    AlignCenterIcon,
    AlignJustifyIcon,
    AlignLeftIcon,
    AlignRightIcon,
    BoldIcon,
    ChevronDownIcon,
    // HighlighterIcon,
    ImageIcon,
    ItalicIcon,
    Link2Icon,
    ListIcon,
    ListOrderedIcon,
    ListTodoIcon,
    LucideIcon,
    MessageSquarePlusIcon,
    MinusIcon,
    PlusIcon,
    PrinterIcon,
    Redo2Icon,
    RemoveFormattingIcon,
    SearchIcon,
    SpellCheckIcon,
    UnderlineIcon,
    Undo2Icon,
    UploadIcon,
} from "lucide-react";
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
    Dialog,
    DialogContent,
    DialogFooter,
    DialogHeader,
    DialogTitle,
} from "@/components/ui/dialog";

// Toolbar subcomponents
interface ToolBarButtonProps {
    onClick?: () => void;
    isActive?: boolean;
    icon: LucideIcon;
}

const ToolBarButton = ({
    onClick,
    isActive,
    icon: Icon,
}: ToolBarButtonProps) => {
    return (
        <button
            onClick={onClick}
            className={cn(
                "text-sm h-8 w-8 flex items-center justify-center rounded-md hover:bg-neutral-200/80 transition-colors",
                isActive && "bg-neutral-200/80"
            )}
        >
            <Icon className="size-4" />
        </button>
    );
};

const FontFamilyButton = ({ editor }: { editor: Editor }) => {
    const fonts = [
        { label: "Arial", value: "Arial" },
        { label: "Helvetica", value: "Helvetica" },
        { label: "Times New Roman", value: "Times New Roman" },
        { label: "Courier New", value: "Courier New" },
        { label: "Georgia", value: "Georgia" },
        { label: "Verdana", value: "Verdana" },
        { label: "Trebuchet MS", value: "Trebuchet MS" },
        { label: "Comic Sans MS", value: "Comic Sans MS" },
        { label: "Impact", value: "Impact" },
        { label: "Lucida Console", value: "Lucida Console" },
    ];

    return (
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <button
                    className={cn(
                        "h-7 w-[120px] flex items-center justify-between rounded-sm hover:bg-neutral-200/80 px-2 text-sm"
                    )}
                >
                    <span className="truncate">
                        {editor?.getAttributes("textStyle").fontFamily || "Arial"}
                    </span>
                    <ChevronDownIcon className="ml-2 size-4" />
                </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="p-1 flex flex-col gap-y-1">
                {fonts.map(({ label, value }) => (
                    <button
                        key={label}
                        onClick={() => editor?.chain().focus().setMark('textStyle', { fontFamily: value }).run()}
                        className={cn(
                            "flex items-center gap-x-2 px-2 py-1 rounded-sm hover:bg-neutral-200/80",
                            editor?.getAttributes("textStyle").fontFamily === value && "bg-neutral-200/80"
                        )}
                        style={{ fontFamily: value }}
                    >
                        <span className="text-sm">{label}</span>
                    </button>
                ))}
            </DropdownMenuContent>
        </DropdownMenu>
    );
};

const HeadingLevelButton = ({ editor }: { editor: Editor }) => {
    const headings = [
        { label: "Normal text", value: 0, fontSize: "16px" },
        { label: "Heading 1", value: 1, fontSize: "32px" },
        { label: "Heading 2", value: 2, fontSize: "24px" },
        { label: "Heading 3", value: 3, fontSize: "20px" },
        { label: "Heading 4", value: 4, fontSize: "18px" },
        { label: "Heading 5", value: 5, fontSize: "16px" },
        { label: "Heading 6", value: 6, fontSize: "14px" },
    ];

    const getCurrentHeading = () => {
        for (let level = 1; level <= 6; level++) {
            if (editor?.isActive("heading", { level })) {
                return `Heading ${level}`;
            }
        }
        return "Normal text";
    };

    return (
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <button
                    className={cn(
                        "h-7 min-w-[100px] flex items-center justify-between rounded-sm hover:bg-neutral-200/80 px-2 text-sm"
                    )}
                >
                    <span className="truncate">{getCurrentHeading()}</span>
                    <ChevronDownIcon className="ml-2 size-4" />
                </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="p-1 flex flex-col gap-y-1">
                {headings.map(({ label, value, fontSize }) => (
                    <button
                        key={value}
                        onClick={() => {
                            if (value === 0) {
                                editor?.chain().focus().setParagraph().run();
                            } else {
                                editor?.chain().focus().toggleHeading({ level: value as Level }).run();
                            }
                        }}
                        className={cn(
                            "flex items-center gap-x-2 px-2 py-1 rounded-sm hover:bg-neutral-200/80",
                            (value === 0 && !editor?.isActive("heading")) ||
                            (editor?.isActive("heading", { level: value }) && "bg-neutral-200/80")
                        )}
                        style={{ fontSize }}
                    >
                        <span>{label}</span>
                    </button>
                ))}
            </DropdownMenuContent>
        </DropdownMenu>
    );
};

const FontSizeButton = ({ editor }: { editor: Editor }) => {
    const currentFontSize = editor?.getAttributes("textStyle").fontSize
        ? editor.getAttributes("textStyle").fontSize.replace("px", "")
        : "16";

    const [fontSize, setFontSize] = useState(currentFontSize);
    const [inputValue, setInputValue] = useState(fontSize);
    const [isEditing, setIsEditing] = useState(false);

    const updateFontSize = (newSize: string) => {
        const size = parseInt(newSize);
        if (!isNaN(size) && size > 0 && size <= 72) {
            editor?.chain().focus().setMark('textStyle', { fontSize: `${newSize}px` }).run();
            setFontSize(newSize);
            setInputValue(newSize);
            setIsEditing(false);
        }
    };

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value;
        if (value.match(/^\d*$/)) {
            setInputValue(value);
        }
    };

    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
        if (e.key === "Enter") {
            updateFontSize(inputValue);
        } else if (e.key === "Escape") {
            setIsEditing(false);
            setInputValue(fontSize);
        }
    };

    const handleInputBlur = () => {
        updateFontSize(inputValue);
    };

    const incrementFontSize = () => {
        const currentSize = parseInt(fontSize);
        const newSize = Math.min(currentSize + 1, 72);
        updateFontSize(newSize.toString());
    };

    const decrementFontSize = () => {
        const currentSize = parseInt(fontSize);
        const newSize = Math.max(currentSize - 1, 1);
        updateFontSize(newSize.toString());
    };

    return (
        <div className="flex items-center gap-x-1">
            <button
                onClick={decrementFontSize}
                className={cn(
                    "h-7 w-7 flex items-center justify-center rounded-sm hover:bg-neutral-200/80 transition-colors"
                )}
            >
                <MinusIcon className="size-4" />
            </button>
            {isEditing ? (
                <Input
                    value={inputValue}
                    onChange={handleInputChange}
                    onKeyDown={handleKeyDown}
                    onBlur={handleInputBlur}
                    className="h-7 w-12 text-center rounded-sm focus:ring-1 focus:ring-neutral-400"
                    autoFocus
                />
            ) : (
                <button
                    onClick={() => setIsEditing(true)}
                    className={cn(
                        "h-7 w-12 text-center rounded-sm hover:bg-neutral-200/80 transition-colors border border-neutral-300"
                    )}
                >
                    <span className="text-sm">{fontSize}</span>
                </button>
            )}
            <button
                onClick={incrementFontSize}
                className={cn(
                    "h-7 w-7 flex items-center justify-center rounded-sm hover:bg-neutral-200/80 transition-colors"
                )}
            >
                <PlusIcon className="size-4" />
            </button>
        </div>
    );
};

// const TextColorButton = ({ editor }: { editor: Editor }) => {
//     const value = editor?.getAttributes("textStyle").color || "#000000";

//     const onChange = (color) => {
//         editor?.chain().focus().setMark('textStyle', { color: color.hex }).run();
//     };

//     return (
//         <DropdownMenu>
//             <DropdownMenuTrigger asChild>
//                 <button
//                     className={cn(
//                         "h-7 w-7 flex flex-col items-center justify-center rounded-sm hover:bg-neutral-200/80 px-1 text-sm"
//                     )}
//                 >
//                     <span className="text-xs">A</span>
//                     <div className="h-0.5 w-full" style={{ backgroundColor: value }} />
//                 </button>
//             </DropdownMenuTrigger>
//             <DropdownMenuContent className="p-0">
//                 <SketchPicker color={value} onChange={onChange} />
//             </DropdownMenuContent>
//         </DropdownMenu>
//     );
// };

// const HighLightColorButton = ({ editor }: { editor: Editor }) => {
//     const value = editor?.getAttributes("highlight").color || "#ffffff";

//     const onChange = (color) => {
//         editor?.chain().focus().toggleHighlight({ color: color.hex }).run();
//     };

//     return (
//         <DropdownMenu>
//             <DropdownMenuTrigger asChild>
//                 <button
//                     className={cn(
//                         "h-7 w-7 flex items-center justify-center rounded-sm hover:bg-neutral-200/80 px-1 text-sm"
//                     )}
//                 >
//                     <HighlighterIcon className="size-4" />
//                 </button>
//             </DropdownMenuTrigger>
//             <DropdownMenuContent className="p-0">
//                 <SketchPicker color={value} onChange={onChange} />
//             </DropdownMenuContent>
//         </DropdownMenu>
//     );
// };

const LinkButton = ({ editor }: { editor: Editor }) => {
    const [value, setValue] = useState(editor?.getAttributes("link").href || "");

    const onChange = (href: string) => {
        editor?.chain().focus().extendMarkRange("link").setLink({ href }).run();
        setValue("");
    };

    return (
        <DropdownMenu
            onOpenChange={(open) => {
                if (open) {
                    setValue(editor?.getAttributes("link").href || "");
                }
            }}
        >
            <DropdownMenuTrigger asChild>
                <button
                    className={cn(
                        "h-7 w-7 flex items-center justify-center rounded-sm hover:bg-neutral-200/80 px-1 text-sm"
                    )}
                >
                    <Link2Icon className="size-4" />
                </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="p-2 flex items-center gap-x-2">
                <Input
                    placeholder="Paste Link"
                    value={value}
                    onChange={(e) => setValue(e.target.value)}
                />
                <Button onClick={() => onChange(value)}>Apply</Button>
            </DropdownMenuContent>
        </DropdownMenu>
    );
};

const ImageButton = ({ editor }: { editor: Editor }) => {
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [imageUrl, setImageUrl] = useState("");

    const onChange = (src: string) => {
        editor?.chain().focus().setImage({ src }).run();
    };

    const onUpload = () => {
        const input = document.createElement("input");
        input.type = "file";
        input.accept = "image/*";

        input.onchange = (e) => {
            const file = (e.target as HTMLInputElement).files?.[0];
            if (file) {
                const imageUrl = URL.createObjectURL(file);
                onChange(imageUrl);
            }
        };

        input.click();
    };

    const handleImageUrlSubmit = () => {
        if (imageUrl) {
            onChange(imageUrl);
            setImageUrl("");
            setIsDialogOpen(false);
        }
    };

    return (
        <>
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <button
                        className={cn(
                            "h-7 w-7 flex items-center justify-center rounded-sm hover:bg-neutral-200/80 px-1 text-sm"
                        )}
                    >
                        <ImageIcon className="size-4" />
                    </button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                    <DropdownMenuItem>
                        <Button variant="ghost" className="w-full" onClick={onUpload}>
                            <UploadIcon className="size-4 mr-2" />
                            Upload
                        </Button>
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => setIsDialogOpen(true)}>
                        <Button variant="ghost" className="w-full">
                            <SearchIcon className="size-4 mr-2" />
                            Paste image url
                        </Button>
                    </DropdownMenuItem>
                </DropdownMenuContent>
            </DropdownMenu>

            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Insert Image URL</DialogTitle>
                    </DialogHeader>
                    <Input
                        placeholder="Insert image URL"
                        value={imageUrl}
                        onChange={(e) => setImageUrl(e.target.value)}
                        onKeyDown={(e) => {
                            if (e.key === "Enter") {
                                handleImageUrlSubmit();
                            }
                        }}
                    />
                    <DialogFooter>
                        <Button onClick={handleImageUrlSubmit}>Insert</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </>
    );
};

const AlignButton = ({ editor }: { editor: Editor }) => {
    const alignments = [
        { label: "Align Left", value: "left", icon: AlignLeftIcon },
        { label: "Align Center", value: "center", icon: AlignCenterIcon },
        { label: "Align Right", value: "right", icon: AlignRightIcon },
        { label: "Align Justify", value: "justify", icon: AlignJustifyIcon },
    ];

    return (
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <button
                    className={cn(
                        "h-7 w-7 flex items-center justify-center rounded-sm hover:bg-neutral-200/80 px-1 text-sm"
                    )}
                >
                    <AlignLeftIcon className="size-4" />
                </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="p-1 flex flex-col gap-y-1">
                {alignments.map(({ label, value, icon: Icon }) => (
                    <button
                        key={value}
                        onClick={() => editor?.chain().focus().setTextAlign(value).run()}
                        className={cn(
                            "flex items-center gap-x-2 px-2 py-1 rounded-sm hover:bg-neutral-200/80",
                            editor?.isActive({ textAlign: value }) && "bg-neutral-200/80"
                        )}
                    >
                        <Icon className="size-4" />
                        <span className="text-sm">{label}</span>
                    </button>
                ))}
            </DropdownMenuContent>
        </DropdownMenu>
    );
};

const ListButton = ({ editor }: { editor: Editor }) => {
    const lists = [
        {
            label: "Bullet List",
            icon: ListIcon,
            isActive: editor?.isActive("bulletList"),
            onClick() {
                editor?.chain().focus().toggleBulletList().run();
            },
        },
        {
            label: "Ordered List",
            icon: ListOrderedIcon,
            isActive: editor?.isActive("orderedList"),
            onClick() {
                editor?.chain().focus().toggleOrderedList().run();
            },
        },
    ];

    return (
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <button
                    className={cn(
                        "h-7 w-7 flex items-center justify-center rounded-sm hover:bg-neutral-200/80 px-1 text-sm"
                    )}
                >
                    <ListIcon className="size-4" />
                </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="p-1 flex flex-col gap-y-1">
                {lists.map(({ label, icon: Icon, isActive, onClick }) => (
                    <button
                        key={label}
                        onClick={onClick}
                        className={cn(
                            "flex items-center gap-x-2 px-2 py-1 rounded-sm hover:bg-neutral-200/80",
                            isActive && "bg-neutral-200/80"
                        )}
                    >
                        <Icon className="size-4" />
                        <span className="text-sm">{label}</span>
                    </button>
                ))}
            </DropdownMenuContent>
        </DropdownMenu>
    );
};

// Toolbar component
function Toolbar({ editor }: { editor: Editor }) {
    const sections = [
        [
            {
                label: "Undo",
                icon: Undo2Icon,
                onClick() {
                    editor?.chain().focus().undo().run();
                },
            },
            {
                label: "Redo",
                icon: Redo2Icon,
                onClick() {
                    editor?.chain().focus().redo().run();
                },
            },
            {
                label: "Print",
                icon: PrinterIcon,
                onClick() {
                    window.print();
                },
            },
            {
                label: "Spell Check",
                icon: SpellCheckIcon,
                onClick() {
                    const current = editor?.view.dom.getAttribute("spellcheck");
                    editor?.view.dom.setAttribute(
                        "spellcheck",
                        current === "false" ? "true" : "false"
                    );
                },
            },
        ],
        [
            {
                label: "Bold",
                icon: BoldIcon,
                isActive: editor?.isActive("bold"),
                onClick() {
                    editor?.chain().focus().toggleBold().run();
                },
            },
            {
                label: "Italic",
                icon: ItalicIcon,
                isActive: editor?.isActive("italic"),
                onClick() {
                    editor?.chain().focus().toggleItalic().run();
                },
            },
            {
                label: "Underline",
                icon: UnderlineIcon,
                isActive: editor?.isActive("underline"),
                onClick() {
                    editor?.chain().focus().toggleUnderline().run();
                },
            },
        ],
        [
            {
                label: "Comment",
                icon: MessageSquarePlusIcon,
                isActive: false, // TODO: Enable this Functionality.
                onClick() {
                    console.log("TODO: Comment");
                },
            },
            {
                label: "List Todo",
                icon: ListTodoIcon,
                isActive: editor?.isActive("taskList"),
                onClick() {
                    editor?.chain().focus().toggleTaskList().run();
                },
            },
            {
                label: "Remove formatting",
                icon: RemoveFormattingIcon,
                onClick() {
                    editor?.chain().focus().unsetAllMarks().run();
                },
            },
        ],
    ];

    return (
        <div className="bg-[#f1f4f9] px-4 py-2 rounded-[24px] flex items-center gap-x-3 overflow-x-auto shadow-sm">
            {sections[0].map((item) => (
                <ToolBarButton key={item.label} {...item} />
            ))}
            <Separator orientation="vertical" className="h-6 w-[1px] bg-neutral-300" />
            <FontFamilyButton editor={editor} />
            <Separator orientation="vertical" className="h-6 w-[1px] bg-neutral-300" />
            <HeadingLevelButton editor={editor} />
            <Separator orientation="vertical" className="h-6 w-[1px] bg-neutral-300" />
            <FontSizeButton editor={editor} />
            <Separator orientation="vertical" className="h-6 w-[1px] bg-neutral-300" />
            {sections[1].map((item) => (
                <ToolBarButton key={item.label} {...item} />
            ))}
            {/* <TextColorButton editor={editor} />
            <HighLightColorButton editor={editor} /> */}
            <Separator orientation="vertical" className="h-6 w-[1px] bg-neutral-300" />
            <LinkButton editor={editor} />
            <ImageButton editor={editor} />
            <AlignButton editor={editor} />
            <ListButton editor={editor} />
            <Separator orientation="vertical" className="h-6 w-[1px] bg-neutral-300" />
            {sections[2].map((item) => (
                <ToolBarButton key={item.label} {...item} />
            ))}
        </div>
    );
}

// TiptapEditor component
export default function TiptapEditor() {
    const editor = useEditor({
        immediatelyRender: false,
        editorProps: {
            attributes: {
                class:
                    "focus:outline-none print:border-0 border bg-white border-[#c7c7c7] flex flex-col min-h-screen w-[816px] mx-auto cursor-text p-4",
            },
        },
        extensions: [
            StarterKit,
            Paragraph,
            Heading.configure({ levels: [1, 2, 3, 4, 5, 6] }),
            Bold,
            Italic,
            Underline,
            Code,
            Highlight,
            Link.configure({ openOnClick: true }),
            Strike,
            Subscript,
            Superscript,
            TextStyle,
            Image,
            TextAlign.configure({
                types: ['heading', 'paragraph'],
            }),
            TaskList,
            TaskItem,
        ],
        content: '<p>Start writing here...</p>',
    });

    useEffect(() => {
        return () => {
            editor?.destroy();
        };
    }, [editor]);

    if (!editor) return null;

    return (
        <div className='p-4'>
            <Toolbar editor={editor} />
            <div className="size-full overflow-x-auto bg-[#f9fbfd] px-0 print:p-0 print:bg-white print:overflow-visible">
                <EditorContent editor={editor} />
            </div>
        </div>
    );
}